{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/utils/wrap.js","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/utils/telemetry.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/html-tag.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./src/danmaku-list.js","webpack:///./src/danmaku-item.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","this","constructor","setPrototypeOf","JSCompiler_renameProperty","prop","obj","workingURL","resolveDoc","CSS_URL_RX","ABS_URL","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","resolveCss","cssText","replace","pre","post","pathFromUrl","substring","lastIndexOf","ShadyDOM","Boolean","ShadyCSS","nativeCss","rootPath","sanitizeDOMValue","Polymer","strictTemplatePolicy","allowTemplateFromDomModule","legacyOptimizations","syncInitialRender","dedupeId","MixinFunction","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","map","extended","set","mixinSet","lcModules","setModule","id","toLowerCase","findModule","DomModule","_HTMLElement","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_wrapNativeSuper","selector","querySelector","old","namespace","register","Error","concat","inst","console","warn","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","define","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","styleForImport","importDoc","importCss","textContent","style","stylesFromModules","moduleIds","trim","split","styles","length","push","_toConsumableArray","stylesFromModule","_styles","_stylesFromModuleImports","template","stylesFromTemplate","assetpath","e$","content","querySelectorAll","include","filter","item","index","self","indexOf","p$","unscoped","hasAttribute","_unscopedStyle","setAttribute","_style","wrap","isPath","path","root","dotIndex","slice","isAncestor","isDescendant","translate","newBase","normalize","Array","isArray","parts","args","toString","j","join","info","last","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","toUpperCase","camelToDashCase","camel","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","len","cb","setTimeout","splice","observe","characterData","microtask","run","callback","cancel","handle","idx","PropertiesChanged","superClass","_superClass","_this","properties_changed_classCallCheck","properties_changed_possibleConstructorReturn","properties_changed_getPrototypeOf","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","properties_changed_inherits","properties_changed_createClass","readOnly","_addPropertyToAttributeMap","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","attributeNameForProperty","_getProperty","_setProperty","props","proto","_createPropertyAccessor","_flushProperties","_setPendingProperty","_invalidateProperties","ext","changed","_shouldPropertyChange","_this2","_initializeInstanceProperties","ready","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","_attributeToProperty","_get","attribute","type","_deserializeValue","typeForProperty","_valueToNodeAttribute","node","str","_serializeValue","removeAttribute","properties_changed_typeof","Number","nativeProperties","getOwnPropertyNames","getPrototypeOf","PropertyAccessors","_base","property_accessors_classCallCheck","property_accessors_possibleConstructorReturn","property_accessors_getPrototypeOf","property_accessors_inherits","a$","observedAttributes","__dataProto","_initializeProtoProperties","property_accessors_get","property_accessors_typeof","Date","JSON","stringify","x","outValue","parse","isNaN","String","model","saveAccessorValue","walker","createTreeWalker","NodeFilter","SHOW_ALL","templateExtensions","dom-if","dom-repeat","wrapTemplateExtension","is","parentNode","replaceChild","attributes","findTemplateNode","nodeInfo","parent","parentInfo","currentNode","firstChild","nextSibling","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","templateInfo","_templateInfo","TemplateStamp","template_stamp_classCallCheck","template_stamp_possibleConstructorReturn","template_stamp_getPrototypeOf","template_stamp_inherits","outerTemplateInfo","nodeInfoList","stripWhiteSpace","_parseTemplateContent","_parseTemplateNode","noted","element","localName","hasInsertionPoint","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","nodeType","Node","TEXT_NODE","removeChild","childInfo","infoIndex","_parseTemplate","createDocumentFragment","attrs","from","_parseTemplateNodeAttribute","HTMLTemplateElement","decorate","dom","importNode","__noInsertionPoint","nodes","nodeList","$","eventName","methodName","context","handler","_methodHost","detail","createNodeEventHandler","_addEventListenerToNode","addEventListener","removeEventListener","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","capitalAttributeRegex","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","extraArgs","ran","runEffectsForProperty","fxs","fx","lastRun","pathMatchesTrigger","trigger","fn","triggerPath","structured","wildcard","runObserverEffect","method","changedProp","dynamicFn","notifyPath","rootProperty","dispatchNotifyEvent","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","runReflectEffect","attrName","_propertyToAttribute","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","addBinding","kind","target","literal","bindings","binding","isCompound","shouldAddListener","_binding$parts$","event","negate","listenerEvent","listenerNegate","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","parseArg","_addTemplatePropertyEffect","runBindingEffect","source","__isPropertyEffectsClient","_setPendingPropertyOrPath","_enqueueClient","storage","__dataCompoundStorage","computeBindingValue","_setUnmanagedPropertyToNode","applyBindingValue","_evaluateBinding","setupCompoundStorage","literals","addNotifyListener","fromProp","toPath","fromPath","currentTarget","handleNotification","createMethodEffect","sig","effectFn","property_effects_typeof","arg","_addPropertyEffect","_marshalArgs","emptyArray","bindingRegex","RegExp","OPEN_BRACKET","literalFromParts","parseMethod","expression","match","static","argList","rawArg","parseArgs","fc","getArgValue","data","notifySplices","array","splices","indexSplices","notifySplice","addedCount","removed","PropertyEffects","propertyEffectsBase","_propertyEffectsBase","property_effects_classCallCheck","property_effects_possibleConstructorReturn","property_effects_getPrototypeOf","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataHost","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","property_effects_inherits","property_effects_createClass","property_effects_get","hostStack","registerHost","effect","_hasPropertyEffect","shouldNotify","isPathNotification","link","links","b","computeLinkedPaths","propIsPath","prevProps","client","__enableOrFlushClients","_readyClients","clients","_enableProperties","setReadOnly","_flushClients","computeEffects","inputProps","runComputedEffects","notifyProps","_propagatePropertyChanges","notified","host","runNotifyEffects","propertyEffects","nextTemplateInfo","to","_len","items","_key","ret","hadLength","pop","start","deleteCount","_len2","_key2","Math","floor","shift","_len3","_key3","unshift","propPath","protectedSetter","values","_args$i","matches","pathValue","instanceBinding","wasPreBound","__templateInfoLast","previousTemplateInfo","beginHosting","endHosting","_bindTemplate","childNodes","setupBindings","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReadOnlyProperty","_createReflectedProperty","_createComputedProperty","hostProps","_parseBindings","origName","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","dynamicFns","HostStack","stack","stackLen","registrations","PropertiesMixin","superPropertiesClass","superCtor","ownProperties","properties","output","normalizeProperties","__ownProperties","properties_mixin_classCallCheck","properties_mixin_possibleConstructorReturn","properties_mixin_getPrototypeOf","properties_mixin_inherits","finalize","__finalized","_finalizeClass","createProperties","_properties","__observedAttributes","keys","__properties","instanceCount","properties_mixin_get","builtCSS","ElementMixin","polymerElementBase","createPropertyFromConfig","allProps","computed","_hasReadOnlyEffect","reflectToAttribute","_hasReflectEffect","notify","_hasNotifyEffect","observer","processElementStyles","klass","templateStyles","stylesWithImports","linkedStyles","firstTemplateChild","firstElementChild","_processStyleText","insertBefore","templateStyleIndex","templateStyle","cloneNode","prepareTemplate","_polymerElementBase","PolymerElement","element_mixin_classCallCheck","element_mixin_possibleConstructorReturn","element_mixin_getPrototypeOf","_template","_importPath","importPath","element_mixin_inherits","element_mixin_createClass","element_mixin_get","observers","__ownObservers","createObservers","_prepareTemplate","error","getTemplateFromDomModule","meta","importMeta","_finalizeTemplate","__propertyDefaults","propertyDefaults","_hasAccessor","styleElement","_stampTemplate","_attachDom","attachShadow","shadowRoot","flushInitial","styleSubtree","__polymerFinalized","LiteralString","string","html_tag_classCallCheck","literalValue","html","strings","innerHTML","reduce","acc","v","htmlValue","DemoCustomElements","danmaku_list_classCallCheck","danmaku_list_possibleConstructorReturn","danmaku_list_getPrototypeOf","danmakuplaystate","_templateObject","danmakuduration","danmakudelay","allowOverlap","area","q","danmaku_list_get","log","danmaku_item_classCallCheck","danmaku_item_possibleConstructorReturn","danmaku_item_getPrototypeOf","animation","pause","play","overlapIndex","danmaku_item_templateObject","danmaku_item_get","_inheritProp","keyframes","left","transform","parentElement","offsetWidth","right","width","_brothers","danmaku_item_toConsumableArray","animate","currentTime","disabled","end","styleFlag","_loop","remove","boundary","0","overlapBrothers","forEach","ele","parseInt","getBoundingClientRect","height","sort","_check","duration","delay","onfinish","finished","oncancel","top","thisBoundingClientRect","targetBoundingClientRect","bottom"],"mappings":"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","file":"polymer-danmaku.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n@license @nocompile\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n(function () {\n  'use strict';\n\n  (function(){if(void 0===window.Reflect||void 0===window.customElements||window.customElements.polyfillWrapFlushCallback)return;const a=HTMLElement;window.HTMLElement=function HTMLElement(){return Reflect.construct(a,[],this.constructor)},HTMLElement.prototype=a.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,a);})();\n\n}());\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable no-unused-vars */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n *\n * @param {string} prop Property name\n * @param {?Object} obj Reference object\n * @return {string} Potentially renamed property name\n */\nwindow.JSCompiler_renameProperty = function(prop, obj) {\n  return prop;\n};\n/* eslint-enable */\n\nexport {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy = false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule = false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations = false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender = false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable valid-jsdoc */\n/**\n * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill\n * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,\n * a node wrapper must be used to access ShadowDOM API.\n * This is similar to using `Polymer.dom` but relies exclusively\n * on the presence of the ShadyDOM polyfill rather than requiring the loading\n * of legacy (Polymer.dom) API.\n * @type {function(Node):Node}\n */\nexport const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?\n  window['ShadyDOM']['wrap'] : (n) => n;\n\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * @fileoverview Module with utilities for converting between \"dash-case\" and\n * \"camelCase\" identifiers.\n */\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     * @override\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     * @override\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      /** @protected {boolean} */\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     * @override\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     * @override\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     * @override\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     * @override\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     * @override\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string=} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     * @override\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     * @override\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     * @override\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {\n          node = /** @type {?Element} */(wrap(node));\n        }\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     * @override\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get\n *     observedAttributes()`. Use `dash-case` attribute names to represent\n *     `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to\n *     generate property accessors for each observed attribute. This must be\n *     called before the first instance is created, for example, by calling it\n *     before calling `customElements.define`. It can also be called lazily from\n *     the element's `constructor`, as long as it's guarded so that the call is\n *     only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to\n *     enable the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   * @private\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an\n     *     element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     * @override\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property\n     *     value.\n     * @override\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     * @override\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     * @override\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\nconst walker = document.createTreeWalker(document, NodeFilter.SHOW_ALL,\n    null, false);\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    walker.currentNode = parent;\n    for (let n=walker.firstChild(), i=0; n; n=walker.nextSibling()) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      walker.currentNode = element;\n      if (walker.firstChild()) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      walker.currentNode = root;\n      for (let node=walker.firstChild(), parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        walker.currentNode = node;\n        next = walker.nextSibling();\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = walker.nextSibling();\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        walker.currentNode = node;\n        if (walker.parentNode()) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!EventTarget} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     * @override\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(\n              inst, /** @type {!Object} */ (effects), id, prop, props, oldProps,\n              hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} props Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  inst.notifyPath(path + '.splices', { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nclass HostStack {\n  constructor() {\n    this.stack = [];\n  }\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  }\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  }\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n}\nconst hostStack = new HostStack();\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\nexport function incrementInstanceCount() {\n  instanceCount++;\n}\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {!Array<!PolymerElementConstructor>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + /** @type {?} */(prototype).is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {!PolymerElementConstructor} prototype Element prototype to register\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty('__observedAttributes')) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport '../utils/boot.js';\n\nimport { rootPath, strictTemplatePolicy, allowTemplateFromDomModule, legacyOptimizations, syncInitialRender } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * Current Polymer version in Semver notation.\n * @type {string} Semver notation of the current version of Polymer.\n */\nexport const version = '3.2.0';\n\nconst builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter must return an `HTMLTemplateElement`.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n      constructor.__ownObservers =\n          constructor.hasOwnProperty(\n              JSCompiler_renameProperty('observers', constructor)) ?\n          /** @type {PolymerElementConstructor} */ (constructor).observers :\n          null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * is also automatically set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed) {\n      if (proto._hasReadOnlyEffect(name)) {\n        console.warn(`Cannot redefine computed property '${name}'.`);\n      } else {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {\n      console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {\n      console.warn(`Cannot make reflected property '${name}' non-reflected.`);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    } else if (info.notify === false && proto._hasNotifyEffect(name)) {\n      console.warn(`Cannot make notify property '${name}' non-notify.`);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    if (!builtCSS) {\n      const templateStyles = template.content.querySelectorAll('style');\n      const stylesWithImports = stylesFromTemplate(template);\n      // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n      const linkedStyles = stylesFromModuleImports(is);\n      const firstTemplateChild = template.content.firstElementChild;\n      for (let idx = 0; idx < linkedStyles.length; idx++) {\n        let s = linkedStyles[idx];\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n        template.content.insertBefore(s, firstTemplateChild);\n      }\n      // keep track of the last \"concrete\" style in the template we have encountered\n      let templateStyleIndex = 0;\n      // ensure all gathered styles are actually in this template.\n      for (let i = 0; i < stylesWithImports.length; i++) {\n        let s = stylesWithImports[i];\n        let templateStyle = templateStyles[templateStyleIndex];\n        // if the style is not in this template, it's been \"included\" and\n        // we put a clone of it in the template before the style that included it\n        if (templateStyle !== s) {\n          s = s.cloneNode(true);\n          templateStyle.parentNode.insertBefore(s, templateStyle);\n        } else {\n          templateStyleIndex++;\n        }\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n      }\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * Look up template from dom-module for element\n   *\n   * @param {string} is Element name to look up\n   * @return {?HTMLTemplateElement|undefined} Template found in dom module, or\n   *   undefined if not found\n   * @protected\n   */\n  function getTemplateFromDomModule(is) {\n    let template = null;\n    // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed\n    // when opted-in via allowTemplateFromDomModule\n    if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {\n      template = /** @type {?HTMLTemplateElement} */ (\n          DomModule.import(is, 'template'));\n      // Under strictTemplatePolicy, require any element with an `is`\n      // specified to have a dom-module\n      if (strictTemplatePolicy && !template) {\n        throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);\n      }\n    }\n    return template;\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   * @extends {polymerElementBase}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Current Polymer version in Semver notation.\n     * @type {string} Semver notation of the current version of Polymer.\n     */\n    static get polymerElementVersion() {\n      return version;\n    }\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _finalizeClass() {\n      super._finalizeClass();\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      this._prepareTemplate();\n    }\n\n    static _prepareTemplate() {\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else if (!legacyOptimizations) {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @param {!Object} props .\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * must be an `HTMLTemplateElement`.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {!HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      // Explanation of template-related properties:\n      // - constructor.template (this getter): the template for the class.\n      //     This can come from the prototype (for legacy elements), from a\n      //     dom-module, or from the super class's template (or can be overridden\n      //     altogether by the user)\n      // - constructor._template: memoized version of constructor.template\n      // - prototype._template: working template for the element, which will be\n      //     parsed and modified in place. It is a cloned version of\n      //     constructor.template, saved in _finalizeClass(). Note that before\n      //     this getter is called, for legacy elements this could be from a\n      //     _template field on the info object passed to Polymer(), a behavior,\n      //     or set in registered(); once the static getter runs, a clone of it\n      //     will overwrite it on the prototype as the working template.\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template =\n          // If user has put template on prototype (e.g. in legacy via registered\n          // callback or info object), prefer that first\n          this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ?\n          this.prototype._template :\n          // Look in dom-module associated with this element's is\n          (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is) ||\n          // Next look for superclass template (call the super impl this\n          // way so that `this` points to the superclass)\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);\n      }\n      return this._template;\n    }\n\n    /**\n     * Set the template.\n     *\n     * @param {!HTMLTemplateElement|string} value Template to set.\n     */\n    static set template(value) {\n      this._template = value;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts,missingProperties} go/missingfnprops\n     */\n    _initializeProperties() {\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @override\n     * @suppress {missingProperties, invalidCasts} Super may or may not\n     *     implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @override\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      const n = wrap(this);\n      if (n.attachShadow) {\n        if (dom) {\n          if (!n.shadowRoot) {\n            n.attachShadow({mode: 'open'});\n          }\n          n.shadowRoot.appendChild(dom);\n          if (syncInitialRender && window.ShadyDOM) {\n            ShadyDOM.flushInitial(n.shadowRoot);\n          }\n          return n.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @override\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @override\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl(this.importPath);\n      }\n      return resolveUrl(url, base);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @param {!HTMLTemplateElement} template Template\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to warn on use of undeclared properties in\n     * template.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      // Warn if properties are used in template without being declared.\n      // Properties must be listed in `properties` to be included in\n      // `observedAttributes` since CE V1 reads that at registration time, and\n      // since we want to keep template parsing lazy, we can't automatically\n      // add undeclared properties used in templates to `observedAttributes`.\n      // The warning is only enabled in `legacyOptimizations` mode, since\n      // we don't want to spam existing users who might have adopted the\n      // shorthand when attribute deserialization is not important.\n      if (legacyOptimizations && !(prop in this._properties)) {\n        console.warn(`Property '${prop}' used in template but not declared in 'properties'; ` +\n          `attribute will not be observed.`);\n      }\n      return super._addTemplatePropertyEffect(templateInfo, prop, effect);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin, version } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\nexport { version };\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n","import { PolymerElement, html } from '@polymer/polymer';\n\nclass DemoCustomElements extends PolymerElement {\n    constructor() {\n        super();\n\n        this.addEventListener('danmakuplaystate-changed', () => {\n            if (this.danmakuplaystate === 'paused') {\n                const items = this.querySelectorAll('danmaku-item');\n                for (let i = 0; i < items.length; i++) {\n                    items[i].danmakuplaystate = 'paused';\n                }\n            } else if (this.danmakuplaystate === 'running') {\n                const items = this.querySelectorAll('danmaku-item');\n                for (let i = 0; i < items.length; i++) {\n                    items[i].danmakuplaystate = 'running';\n                }\n            }\n        });\n    }\n\n    static get template() {\n        return html`\n            <style>\n                :host {\n                    display: block;\n                    position: relative;\n                }\n            </style>\n            <slot></slot>\n        `;\n    }\n\n    static get properties () {\n        return {\n            danmakuplaystate: {\n                type: String,\n                notify: true,\n                value: 'running',\n            },\n            danmakuduration: {\n                type: Number,\n                value: 4000,\n            },\n            danmakudelay: {\n                type: Number,\n                value: 0,\n            },\n            allowOverlap: {\n                type: Boolean,\n                value: false,\n            },\n            area: {\n                type: Number,\n                value: 100,\n            },\n        };\n    }\n\n    attributeChangedCallback (q) {\n        super.attributeChangedCallback();\n        console.log('attributeChangedCallback');\n    }\n}\n\ncustomElements.define('danmaku-list', DemoCustomElements);","import { PolymerElement, html } from '@polymer/polymer';\n\nclass DemoCustomElements extends PolymerElement {\n    constructor() {\n        super();\n\n        this.addEventListener('danmakuplaystate-changed', () => {\n            if (this.danmakuplaystate === 'paused') {\n                this.animation && this.animation.pause();\n            } else if (this.danmakuplaystate === 'running') {\n                this.animation && this.animation.play();\n            }\n        });\n    }\n\n    static get properties () {\n        return {\n            danmakuplaystate: {\n                type: String,\n                notify: true,\n            },\n            danmakuduration: {\n                type: Number,\n            },\n            danmakudelay: {\n                type: Number,\n            },\n            overlapIndex: {\n                type: Number,\n                value: 0,\n            },\n            mode: {\n                type: String,\n                value: 'scroll',\n            },\n        };\n    }\n\n    static get template () {\n        return html`\n            <style>\n                :host {\n                    display: inline-block;\n                    font-size: 25px;\n                    line-height: 1;\n                    position: absolute;\n                    text-align: center;\n                    word-break: keep-all;\n                }\n            </style>\n            <slot></slot>\n        `;\n    }\n\n    connectedCallback () {\n        super.connectedCallback();\n\n        this._inheritProp('danmakuplaystate');\n        this._inheritProp('danmakuduration');\n        this._inheritProp('danmakudelay');\n\n        let keyframes = [];\n        if (this.mode === 'scroll') {\n            this.style.left = '100%';\n            keyframes = [{\n                transform: `translateX(0px) translateY(0px) translateZ(0px)`\n            }, {\n                transform: `translateX(-${this.parentElement.offsetWidth + this.offsetWidth}px) translateY(0px) translateZ(0px)`\n            }];\n        } else if (this.mode === 'reverse') {\n            this.style.right = '100%';\n            keyframes = [{\n                transform: `translateX(0px) translateY(0px) translateZ(0px)`\n            }, {\n                transform: `translateX(${this.parentElement.offsetWidth + this.offsetWidth}px) translateY(0px) translateZ(0px)`\n            }];\n        } else {\n            this.style.width = '100%';\n        }\n\n        this._brothers = [...this.parentElement.querySelectorAll('danmaku-item')].slice(0, -1).filter((item) => (item.mode === this.mode) && (item.animate.currentTime !== item.danmakuduration));\n        let index = 0;\n        let disabled = false;\n        let end = false;\n        let styleFlag = 'top';\n        if (this.mode === 'bottom') {\n            styleFlag = 'bottom';\n        }\n        while (!end) {\n            if (index > 0 && !this.parentElement.allowOverlap) {\n                this.remove();\n                disabled = true;\n                break;\n            }\n            let boundary = {\n                0: 1,\n            }; // boundaries of other danmaku items\n            const overlapBrothers = this._brothers.filter((item) => item.overlapIndex === index);\n            overlapBrothers.forEach((ele) => {\n                boundary[parseInt(ele.style[styleFlag] || 0)] = 1;\n                boundary[parseInt(ele.style[styleFlag] || 0) + ele.getBoundingClientRect().height] = 1;\n            });\n            if (overlapBrothers.length === 0) {\n                this.style[styleFlag] = '0px';\n                this.overlapIndex = index;\n                end = true;\n            } else {\n                boundary = Object.keys(boundary).map((item) => parseInt(item)).sort((a, b) => a - b);\n                for (let i = 0; i < boundary.length; i++) {\n                    if (this._check(boundary[i], index, this.mode)) {\n                        this.style[styleFlag] = boundary[i] + 'px';\n                        this.overlapIndex = index;\n                        end = true;\n                        break;\n                    }\n                }\n            }\n            index++;\n        }\n        \n        if (!disabled) {\n            this.animation = this.animate(keyframes, {\n                duration: this.danmakuduration,\n                delay: this.danmakudelay,\n            });\n            if (this.danmakuplaystate === 'paused') {\n                this.animation.pause();\n            }\n            this.animation.onfinish = () => {\n                this.dispatchEvent(new CustomEvent('danmakuend'));\n                this.finished = true;\n                this.remove();\n            };\n            this.animation.oncancel = () => {\n                this.dispatchEvent(new CustomEvent('danmakucannel'));\n                this.remove();\n            };\n    \n            this.dispatchEvent(new CustomEvent('danmakustart'));\n        }\n    }\n    \n    disconnectedCallback () {\n        super.disconnectedCallback();\n        if (!this.finished) {\n            if (this.animation) {\n                this.animation.cancel();\n            } else {\n                this.dispatchEvent(new CustomEvent('danmakucannel'));\n            }\n        }\n    }\n\n    _inheritProp (name) {\n        if (this[name] === undefined && this.parentElement[name] !== undefined) {\n            this[name] = this.parentElement[name];\n        }\n    }\n\n    _check (top, index, mode) {\n        const thisBoundingClientRect = this.getBoundingClientRect();\n        if (top + thisBoundingClientRect.height > this.parentElement.getBoundingClientRect().height * ((mode === 'scroll' || mode === 'reverse') ? (this.parentElement.area / 100) : 1)) {\n            return false;\n        }\n        const overlapBrothers = this._brothers.filter((item) => item.overlapIndex === index);\n        for (let i = 0; i < overlapBrothers.length; i++) {\n            if (overlapBrothers[i].animation.currentTime !== overlapBrothers[i].danmakuduration) { // hack\n                const targetBoundingClientRect = overlapBrothers[i].getBoundingClientRect();\n    \n                if (mode === 'scroll') {\n                    if (targetBoundingClientRect.top < (top + thisBoundingClientRect.bottom)\n                        && targetBoundingClientRect.bottom > (top + thisBoundingClientRect.top)) { // pathway coincide\n                        if (targetBoundingClientRect.right > thisBoundingClientRect.left + ((this.danmakudelay < 0) ? (this.parentElement.offsetWidth / (this.parentElement.offsetWidth + this.offsetWidth) * this.danmakudelay / this.duration) : 0)) { // crash immediately\n                            return false;\n                        }\n                        if (overlapBrothers[i].danmakuduration - overlapBrothers[i].animation.currentTime + overlapBrothers[i].danmakudelay > (this.parentElement.offsetWidth / (this.parentElement.offsetWidth + this.offsetWidth) * this.danmakuduration) + this.danmakudelay) { // crash in animation\n                            return false;\n                        }\n                    }\n                } else if (mode === 'reverse') {\n                    if (targetBoundingClientRect.top < (top + thisBoundingClientRect.bottom)\n                        && targetBoundingClientRect.bottom > (top + thisBoundingClientRect.top)) { // pathway coincide\n                        if (targetBoundingClientRect.left < thisBoundingClientRect.right + ((this.danmakudelay < 0) ? (this.parentElement.offsetWidth / (this.parentElement.offsetWidth + this.offsetWidth) * this.danmakudelay / this.duration) : 0)) { // crash immediately\n                            return false;\n                        }\n                        if ((overlapBrothers[i].danmakuduration - overlapBrothers[i].animation.currentTime + overlapBrothers[i].danmakudelay) > (this.parentElement.offsetWidth / (this.parentElement.offsetWidth + this.offsetWidth) * this.danmakuduration) + this.danmakudelay) { // crash in animation\n                            return false;\n                        }\n                    }\n                } else if (mode === 'top') {\n                    if (targetBoundingClientRect.top < (top + thisBoundingClientRect.bottom)\n                        && targetBoundingClientRect.bottom > (top + thisBoundingClientRect.top)) {\n                        return false;\n                    }\n                } else if (mode === 'bottom') {\n                    if (targetBoundingClientRect.top < (this.parentElement.getBoundingClientRect().height + thisBoundingClientRect.top - top)\n                        && targetBoundingClientRect.bottom > (this.parentElement.getBoundingClientRect().height + thisBoundingClientRect.top - thisBoundingClientRect.height - top)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n\ncustomElements.define('danmaku-item', DemoCustomElements);"],"sourceRoot":""}